package antixtransfer;

// node -> master initial connection message
message connect_init_node {
	message Team {
		required int32 id = 1;
		required int32 num_robots = 2;
	}

	required string ip_addr = 1;
	required string neighbour_port = 2;
	required string gui_port = 3;
	repeated Team team = 4;
}

// client -> master initial connection message
message connect_init_client {
	required int32 num_robots = 1;
	required int32 id = 2;
}

// master -> node response upon initial connect
// node -> client message upon simulation start
// master->node does not include any Homes, as they are not yet decided at that point
message connect_init_response {
	message Home {
		required int32 team = 1;
		required double x = 2;
		required double y = 3;
	}

	required int32 id = 1;
	required double world_size = 2;
	required int32 sleep_time = 3;
	required double vision_range = 4;
	required double fov = 5;
	required double pickup_range = 6;
	required double home_radius = 7;
	required double robot_radius = 8;
	repeated Home home = 9;
}

message node_node_sync {
	required int32 id = 1;
}

message node_master_sync {
	required int32 my_id = 1;
//	required int32 heard_id = 2;
}

// used to have synchronous turns
message done {
	enum Type {
		CLIENT = 0;
		NODE = 1;
	}
	message Score {
		required int32 team_id = 1;
		required int32 score = 2;
	}
	required int32 my_id = 1;
	required Type type = 2;
	repeated Score scores = 3;
}

// master -> node/client list of nodes
// XXX should probably rename this to reflect inclusion of Home
// "simulation state?"
message Node_list {
	message Node {
		required string ip_addr = 1;
		required string neighbour_port = 2;
		required string gui_port = 3;
		required int32 id = 4;
		// optional as we only set this right before sending out node list
		optional double x_offset = 5;
	}

	message Home {
		required int32 team = 1;
		required double x = 2;
		required double y = 3;
	}

	// Indicates the robots for the given team are initially all on node with this
	// id
	message Robots_on_Node {
		required int32 team = 1;
		required int32 num_robots = 2;
		required int32 node = 3;
	}
	repeated Node node = 1;
	repeated Home home = 2;
	repeated Robots_on_Node robots_on_node = 3;
	required int32 initial_pucks_per_node = 4;
}

message connect {
	enum connectionType {
		CLIENT = 0;
		SERVER = 1;
	}

	required connectionType type = 1 [default = CLIENT];
}

message MasterServerClientInitialization {
	required double vision_range = 1;
	required double fov = 2;	
	required double world_size = 3;
	required double robot_radius = 4;
	required double home_radius = 5;
	// id assigned to the client
	required int32 id = 6;
	required int32 sleep_time = 7;
	required double pickup_range = 8;
}	

message SendMap {
	message Robot {
		required int32 team = 1;
		required int32 id = 2;
		required double x = 3;
		required double y = 4;
	}

	message Puck {
		required double x = 1;
		required double y = 2;
		required bool held = 3;
	}

	repeated Robot robot = 1;
	repeated Puck puck = 2;
}

// GUI needs a bit more information
message SendMap_GUI {
	message Robot {
		required int32 team = 1;
		required int32 id = 2;
		required double x = 3;
		required double y = 4;
		required double a = 5;
	}

	message Puck {
		required double x = 1;
		required double y = 2;
		required bool held = 3;
	}

	repeated Robot robot = 1;
	repeated Puck puck = 2;
}

// potentially used for redesign
message SendMap2 {
	message Robot {
		required double x = 1;
		required double y = 2;
		optional int32 puck_id = 3;
		optional bool puck_action = 4;
	}
	repeated Robot robot = 1;
}

message move_bot {
	message Robot {
		required int32 id = 1;
		required int32 team = 2;
		required double x = 3;
		required double y = 4;
		required double a = 5;
		required double v = 6;
		required double w = 7;
		required bool has_puck = 8;
		required double last_x = 9;
		required double last_y = 10;
		repeated int32 ints = 11;
		repeated double doubles = 12;
		required double bbox_x_min = 13;
		required double bbox_x_max = 14;
		required double bbox_y_min = 15;
		required double bbox_y_max = 16;
	}
	required bool from_right = 1;
	repeated Robot robot = 2;
}

message control_message {
	enum Puck_Action {
		NONE = 1;
		PICKUP = 2;
		DROP = 3;
	}

	message Robot {
		required int32 id = 1;
		required Puck_Action puck_action = 2 [default = NONE];
		required double v = 3;
		required double w = 4;
		optional double last_x = 5;
		optional double last_y = 6;
		repeated int32 ints = 7;
		repeated double doubles = 8;
	}

	required int32 team = 1;
	repeated Robot robot = 2;
}

message sense_data {
	message Robot {
		message Seen_Robot {
			required double range = 1;
			required double bearing = 2;
		}

		message Seen_Puck {
			required double range = 1;
			required double bearing = 2;
			required bool held = 3;
		}

		required int32 id = 1;
		required bool has_puck = 2;
		required double a = 3;
		required double x = 4;
		required double y = 5;
		// We have to pass these around or else the separate clients will work
		// based on out of date previous direction/heading and cause robots to
		// continually cross back & forth in some cases
		required double last_x = 6;
		required double last_y = 7;
		repeated Seen_Robot seen_robot = 8;
		repeated Seen_Puck seen_puck = 9;
		repeated int32 ints = 10;
		repeated double doubles = 11;
	}

	repeated Robot robot = 1;
}

message GUI_Request {
	required bool r = 1;
}
